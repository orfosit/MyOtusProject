///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Таблица - см. УправлениеДоступом.ТаблицаНаборыЗначенийДоступа
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	//ВзаимодействияСобытия.ЗаполнитьНаборыЗначенийДоступа(ЭтотОбъект, Таблица);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	//ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	//
	//ПредыдущаяПометкаУдаления = Ложь;
	//Если Не ЭтоНовый() Тогда
	//	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	//КонецЕсли;
	//ДополнительныеСвойства.Вставить("ПометкаУдаления", ПредыдущаяПометкаУдаления);
	//
	//Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
	//	ЕстьВложения = ?(ПометкаУдаления, Ложь, РаботаСФайламиСлужебныйВызовСервера.КоличествоПрисоединенныхФайлов(Ссылка) > 0);
	//КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;         
	
	Если ЗначениеЗаполнено(ЭлектронноеПисьмо) Тогда
		//РаботаСФайлами.СкопироватьПрисоединенныеФайлы(ЭлектронноеПисьмо,Ссылка);   
		КопируемыеФайлы = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ЭлектронноеПисьмо, КопируемыеФайлы);
		Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл 
		    АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл));
		    ПараметрыФайла = Новый Структура(
		    "ВладелецФайлов,Автор,ИмяБезРасширения,РасширениеБезТочки,ВремяИзмененияУниверсальное", 
		    Ссылка, КопируемыйФайл.Автор, КопируемыйФайл.Наименование, КопируемыйФайл.Расширение, 
		    КопируемыйФайл.ДатаМодификацииУниверсальная);
	    	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДвоичныхДанных);            
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//УправлениеЭлектроннойПочтой.УдалитьВложенияУПисьма(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	// регистр СостоянияЗанятостиСотрудников
	Если СостояниеОбращения <>  Перечисления.СостояниеРаботыОбращения.Зарегистрировано тогда
		Движения.СостоянияЗанятостиСотрудников.Записывать = Истина;
		Движение = Движения.СостоянияЗанятостиСотрудников.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Ответственный;
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.Сотрудник = Ответственный;                           
		Если СостояниеОбращения = Перечисления.СостояниеРаботыОбращения.УАналитика ИЛИ СостояниеОбращения = Перечисления.СостояниеРаботыОбращения.УРазработчика Тогда 
	    	Движение.СостояниеЗагруженности = Перечисления.СостояниеЗагруженности.ВРаботе;
		ИначеЕсли СостояниеОбращения =  Перечисления.СостояниеРаботыОбращения.УточнениеИнформации Тогда
			Движение.СостояниеЗагруженности = Перечисления.СостояниеЗагруженности.ОжиданиеОтвета;
		ИначеЕсли СостояниеОбращения =  Перечисления.СостояниеРаботыОбращения.Выполнено ИЛИ СостояниеОбращения =  Перечисления.СостояниеРаботыОбращения.Отклонено Тогда
			Движение.СостояниеЗагруженности = Перечисления.СостояниеЗагруженности.Простой;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		 |	Обращение.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.Обращение КАК Обращение
		 |ГДЕ
		 |	Обращение.ЭлектронноеПисьмо = &ЭлектронноеПисьмо";
		Запрос.УстановитьПараметр("ЭлектронноеПисьмо",ДанныеЗаполнения);
		Рез = Запрос.Выполнить();
		
		//Если Рез.Пустой() Тогда

			ТемаОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения,"Тема");
			ОписаниеОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения,"Текст"); 
			УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения,"УчетнаяЗапись"); 
			АдресЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись,"АдресЭлектроннойПочты"); 
			Ответственный = Пользователи.АвторизованныйПользователь(); 
			СостояниеОбращения = Перечисления.СостояниеРаботыОбращения.Зарегистрировано;
		    ЭлектронноеПисьмо = ДанныеЗаполнения;                               
			Приоритет = Перечисления.ПриоритетОбращения.Обычный;    
			ТипОбращения = Перечисления.ТипОбращения.ЗапросНаОбслуживание;    
			Организация = Константы.Организация.Получить();
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ОтправительАдрес) ТОгда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
					|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец КАК Клиент
					|ИЗ
					|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
					|ГДЕ
					|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
					|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид";
				
				Запрос.УстановитьПараметр("АдресЭП", НРег(ДанныеЗаполнения.ОтправительАдрес));
				Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);			
				РезультатЗапроса = Запрос.Выполнить();			
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Клиент =  ВыборкаДетальныеЗаписи.Клиент; 
					КонтактноеЛицоОтЗаказчика = ВыборкаДетальныеЗаписи.КонтактноеЛицо; 
				
				КонецЦикла;	    
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КлиентыПараметрыРеакции.ТипОбращения КАК ТипОбращения,
				|	КлиентыПараметрыРеакции.ВремяРеакции КАК ВремяРеакции
				|ИЗ
				|	Справочник.Клиенты.ПараметрыРеакции КАК КлиентыПараметрыРеакции
				|ГДЕ
				|	КлиентыПараметрыРеакции.Ссылка = &Клиент
				|	И КлиентыПараметрыРеакции.ТипОбращения = &ТипОбращения";
			
			Запрос.УстановитьПараметр("Клиент", Клиент);
			Запрос.УстановитьПараметр("ТипОбращения", Перечисления.ТипОбращения.ЗапросНаОбслуживание);

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КрайнийСрокРеакции = ТекущаяДата() + ВыборкаДетальныеЗаписи.ВремяРеакции * 60*60;
			КонецЦикла;
			КрайнийСрокРеакции = КрайнийСрокРеакции;
			
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТемаОбращения,";");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СистемыУчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СистемыУчета КАК СистемыУчета
				|ГДЕ
				|	СистемыУчета.Наименование ПОДОБНО &Наименование";
			
			Запрос.УстановитьПараметр("Наименование", "%"+МассивСтрок[0]+"%");  

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ИТСистема = Справочники.СистемыУчета.ПустаяСсылка();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				ИТСистема = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		
			Ответственный = OTUS.ОпределитьОтветсвенногоПоУмолчанию(Клиент, ИТСистема); 

			КонецЕсли;		
		КонецЕсли;
	//Иначе                                        
	//	ОбщегоНазначения.СообщитьПользователю("По данному письму обращение уже создано!");
	//	Отказ = Истина;
	//КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли