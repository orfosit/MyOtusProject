Перем гл_булВнешняяКомпонентаПодключена;
Перем гл_стрИмяКомпоненты Экспорт;

Перем глProducer;
Перем глConsumer Экспорт;  
Перем глAdminClient;


#Область ТипыМодуля

//Получатель
Функция Получатель_ПолучитьТаблицуСообщения() Экспорт
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("key", 		);
	тзРезультат.Колонки.Добавить("value", 		);
	тзРезультат.Колонки.Добавить("topic", 		Новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("partition", 	Новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("offset", 		Новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("timestamp", 	Новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("headers", 	Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат тзРезультат;	
КонецФункции

Функция Получатель_ПолучитьТаблицуЗаголовки() Экспорт
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("key", 	);
	тзРезультат.Колонки.Добавить("value",	);
		
	Возврат тзРезультат;	
КонецФункции

//Отправитель
Функция Отправитель_ПолучитьТаблицуСообщения()
	
	тзРезультат = Новый ТаблицаЗначений();
	                                                                
	тзРезультат.Колонки.Добавить("index", 		Новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("key", 		);
	тзРезультат.Колонки.Добавить("value", 		);

	Возврат тзРезультат;	
КонецФункции

Функция Отправитель_ПолучитьТаблицуЗаголовки() Экспорт
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("key", 	);
	тзРезультат.Колонки.Добавить("value",	);
		
	Возврат тзРезультат;	
КонецФункции

Функция Отправитель_ПолучитьТаблицуОтчетОДоставке() Экспорт
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("key", 		);
	тзРезультат.Колонки.Добавить("status", 		);
	тзРезультат.Колонки.Добавить("topic", 		);
	тзРезультат.Колонки.Добавить("partition", 	);
	тзРезультат.Колонки.Добавить("timestamp",	);
	тзРезультат.Колонки.Добавить("offset", 	 	);
	тзРезультат.Колонки.Добавить("error", 		);	
		
	Возврат тзРезультат;	
КонецФункции

//Клиент администрирования
Функция КлиентАдминистрирования_ПолучитьТаблицуСписокГруппПолучателей() Экспорт   
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("group_id", 	);
	тзРезультат.Колонки.Добавить("state", 		);
	тзРезультат.Колонки.Добавить("is_simple", 	);
		
	Возврат тзРезультат;	
КонецФункции   

Функция КлиентАдминистрирования_ПолучитьТаблицуТопикПартицияСмещение() Экспорт   
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("topic",		);
	тзРезультат.Колонки.Добавить("partition",	);
	тзРезультат.Колонки.Добавить("offset",		);      
	тзРезультат.Колонки.Добавить("error",		);
		
	Возврат тзРезультат;	
КонецФункции        

Функция КлиентАдминистрирования_ПолучитьТаблицуWatermarkOffsets() Экспорт    
	
	тзРезультат = Новый ТаблицаЗначений();
	
	тзРезультат.Колонки.Добавить("topic",		);
	тзРезультат.Колонки.Добавить("partition",	);
	тзРезультат.Колонки.Добавить("low",			);      
	тзРезультат.Колонки.Добавить("hight",		);
		
	Возврат тзРезультат;	
КонецФункции


#КонецОбласти


Процедура ИнициализацияМодуля()	
	
	гл_булВнешняяКомпонентаПодключена = Ложь;
	
	глProducer = Неопределено;
	глConsumer = Неопределено;	
	
	гл_стрИмяКомпоненты	= "librdkafka";
КонецПроцедуры  

Функция ВыполнитьПодключениеВнешнейКомпоненты(булИзОбщегоМакета)
	Возврат ВыполнитьПодключениеВнешнейКомпонентыМакет();
КонецФункции

Функция ВыполнитьПодключениеВнешнейКомпонентыМакет()	
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");     
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда	
		МакетКомпоненты = ПолучитьМакет("librdkafka_win32");
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		МакетКомпоненты = ПолучитьМакет("librdkafka_win64");
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		МакетКомпоненты = ПолучитьМакет("librdkafka_linux32");	
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		МакетКомпоненты = ПолучитьМакет("librdkafka_linux64");		
	Иначе
		сткРезультат.стрОписаниеОшибки = "Не поддерживаемая архитектура платформы";
		Возврат сткРезультат;
	КонецЕсли;
	
	Попытка
		_РезультатПодключенияВнешнейКомпоненты = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(МакетКомпоненты), "librdkafka", ТипВнешнейКомпоненты.Native);
		Если НЕ _РезультатПодключенияВнешнейКомпоненты Тогда
			сткРезультат.стрОписаниеОшибки = "Ошибка подключения внешней компоненты";
			Возврат сткРезультат;
		КонецЕсли;
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
		Возврат сткРезультат;
	КонецПопытки;
	
	гл_булВнешняяКомпонентаПодключена = Истина;	
	сткРезультат.булУспешно = Истина;
	
	Возврат сткРезультат;
КонецФункции


#Область Получтатель


// Функция - Создать получателя
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки)
//
//Создает объект получателя в глобальной переменной модуля
Функция СоздатьПолучателя(булФлагДляСовместимости = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если глConsumer <> Неопределено Тогда
		сткРезультат.булУспешно = Истина;
		Возврат сткРезультат;	
	КонецЕсли;
	
	Если Не  гл_булВнешняяКомпонентаПодключена Тогда
		 сткРезультатПодключения = ВыполнитьПодключениеВнешнейКомпоненты(булФлагДляСовместимости);
		 Если Не сткРезультатПодключения.булУспешно Тогда
			 сткРезультат.стрОписаниеОшибки = сткРезультатПодключения.стрОписаниеОшибки;
			Возврат сткРезультат;	 
		 КонецЕсли;
	 КонецЕсли;
	 
	Попытка
		 глConsumer = Неопределено;
		 глConsumer = Новый("AddIn." + гл_стрИмяКомпоненты + ".KafkaConsumer");
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
		Возврат сткРезультат;
	КонецПопытки;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;
КонецФункции
 
// Функция - Получтатель проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Если объект существует
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект получателя и возможна ли работа с ним
Функция Получтатель_ПроверитьДоступностьОбъекта() Экспорт

	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если НЕ гл_булВнешняяКомпонентаПодключена Тогда
		сткРезультат.стрОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат сткРезультат;
	КонецЕсли;
	
	Если глConsumer = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = "Не создан получатель";
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции
 
// Функция - Получатель установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если параметр установлен
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для получателя (глConsumer)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Получатель_Инициализировать"
Функция Получатель_УстановитьПараметрГлобальный(Знач стрКлюч, Знач стрЗначение) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глConsumer.SetGlobalConf(стрКлюч, стрЗначение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель установить параметр топика
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если параметр установлен
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр топика для получателя (глConsumer) 
//	Пример: стрКлюч = auto.offset.reset стрЗначение = smallest  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Получатель_Инициализировать"
Функция Получатель_УстановитьПараметрТопика(Знач стрКлюч, Знач стрЗначение) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глConsumer.SetTopicConf(стрКлюч, стрЗначение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель сбросить параметры
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Сбрасывает установенные параметры топика и параметры глобального контекста (установленные функциями Получатель_УстановитьПараметрГлобальный, Получатель_УстановитьПараметрТопика)
//!!Для применения - необходимка повторная инициализация получателя с помощью функции "Получатель_Инициализировать"
Функция Получатель_СброситьПараметры() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глConsumer.ConfReset();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции
	
// Функция - Получатель инициализировать
//
// Параметры:
//  стрСписокБрокеров		 - Строка 	 - Адреса брокеров в формате "10.0.5.187:9092,10.0.5.85:9092,10.0.5.86:9092"
//  стрИмяГруппыПолучателей	 - Стркоа	 - Произвольная строка - идентификатор группы получателей
//
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "Получатель_УстановитьПараметрГлобальный", "Получатель_УстановитьПараметрТопика", "Получатель_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК, полностью подготавливает получателя для чтения данных
Функция Получатель_Инициализировать(Знач стрСписокБрокеров, Знач стрИмяГруппыПолучателей) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глConsumer.Инициализация(стрСписокБрокеров, стрИмяГруппыПолучателей);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель подписаться
//
// Параметры:
//  мТопики	 - Массив	 - Массив строк, содержащих имена топиков, на которые необходимо подписаться
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет подписку на список переданных топиков
//Необходимо вызывать после инициализации
//Предполагает автоматическое распределение партиций топиков на получателей внутри группы
//	(т.е. если подписано на топик несколько получателей, с одной и той же группой - партиции будут распределены между ними брокером автоматически)
Функция Получатель_Подписаться(Знач мТопики) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	Результат = глConsumer.ClearSubscribeList();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = "Ошибка очистки списка топиков: " + глConsumer.ErrorDescription;	
		Возврат сткРезультат;
	КонецЕсли;
	
	Для Каждого стрТопик Из мТопики Цикл 
		Результат = глConsumer.AddTopicToSubscribeList(стрТопик);
		Если Результат <> Истина Тогда
			сткРезультат.стрОписаниеОшибки = "Ошибка добавления топика в список: " + глConsumer.ErrorDescription;	
			Возврат сткРезультат;
		КонецЕсли;	
	КонецЦикла;
	
	Результат = глConsumer.Subscribe();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = "Ошибка подписания на топики: " + глConsumer.ErrorDescription;	
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель отписаться
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Отписывается от всех топиков, на которые ранее была выполнена подписка с помощью функции "Получатель_Подписаться"
Функция Получатель_Отписаться() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глConsumer.Unsubscribe();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель добавить назначение
//
// Параметры:
//  стрТопик	 - Строка	 -  Имя топика, который необходимо добавить в список назначений
//  чслРаздел	 - Число	 -  Номер раздела топика
//  чслСмещение	 - Число,Неопределено	 - Смещение с которого необходимо начать чтение, если Неопределено - будут получено последнее смещение, закоммиченное в брокер
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Добавляет назначение в специальный список, внутри ВК
//Метод не выполняет назначение, а только добавляет назначение в специальный список внуутри ВК
//Непосредственное назначение выполняется функцией "Получатель_Назначить"
Функция Получатель_ДобавитьНазначение(Знач стрТопик, Знач чслРаздел, Знач чслСмещение = Неопределено) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.AddRecordToTopicPartitionList(стрТопик, чслРаздел, чслСмещение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель очистить список назначений
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Очищает список назначений внутри ВК, сформированный посредставм вызова функции "Получатель_ДобавитьНазначение"
//Функция не выполняет сброс назначений, а только очищает список внутри ВК, назначения сбрасываются функией "Получатель_СброситьНазначения"
Функция Получатель_ОчиститьСписокНазначений() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.ClearTopicPartitionList();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель назначить
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет назначения "марштрутов", для чтения из них данных
//Берет маршруты из внутреннего списка ВК, сформированного вызовами функции "Получатель_ДобавитьНазначение"
Функция Получатель_Назначить() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.Assign();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель сбросить назначения
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет сброс назначений, сделанных функцией "Получатель_Назначить"
Функция Получатель_СброситьНазначения() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.Unassign();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель прочитать список сообщения в пул
//		Читает список сообщений из брокера - цикл получения организован внутри ВК, что быстее чем использование метода "Получатель_ПрочитатьСообщенияВПул"
//
// Параметры:
//  чслКоличество				 - Число	 - Количество сообщений, которые необходимо получить
//  чслТайимаутНаОдно			 - Число	 - Ожидание оджного сообщения
//  чслМаксимумТаймаутов		 - Число	 - Количество ошибок, в том числе таймаутов, после которого получение будет прервано
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 				- Истина, если успешно
//		чКоличествоПрочитано	- Количество прочитанных сообщений
//		стрОписаниеОшибки 		- содержит описание ошибки, в случае неудачи, при выпонении операции
//  
//Получает сообщения из брокера и помещает их во внутренний пул ВК, получение выполняется из "маршрутов", которые назначены получателю (c помощью фунцкии "Получатель_Назначить") 
//или из разделов назначенных получателю брокером (для топиков, на которые выполнялась подписка с помощью функции "Получатель_Подписаться")
//
//
//При подписании на топик - мы читаем из всех его партиций, и в какой-либо могут закочиться сообщения,
// а в любой другой - нет, при этом при чтении из той, где сообщения закончились - мы получим таймаут
// поэтому если мы подписывались на топик, а не назначали партицию для чтения - имеет смысл после первого таймаута
// - делать еще попытки, также таймауты могут быть при перебалансировке нагрузки брокером - RebalanceCb 
// - при подписке на топик еще одного получателя с такой же группой, как у текущего - партиции будут перераспределены
// брокером между получателями
Функция Получатель_ПрочитатьСписокСообщенийВПул(Знач чслКоличество, Знач чслТайимаутНаОдно, Знач ErrorCountToInterrupt = 1) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("булТаймаут", Ложь);
	сткРезультат.Вставить("FatalError", Ложь);

	сткРезультат.Вставить("чКоличествоПрочитано", 0);	
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	Результат = глConsumer.ConsumePool(чслТайимаутНаОдно, чслКоличество, ErrorCountToInterrupt);
	Если Результат <> 1 Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	сткРезультат.булТаймаут = (сткРезультат.стрОписаниеОшибки = "Local: Timed out") ИЛИ (сткРезультат.стрОписаниеОшибки = "Timeout: Local: Timed out")
		ИЛИ (сткРезультат.стрОписаниеОшибки = "Local queue is full");
	сткРезультат.булУспешно = (сткРезультат.булТаймаут ИЛИ Результат = 1) И НЕ глConsumer.FatalError;
	сткРезультат.FatalError = глConsumer.FatalError;
	
	сткРезультат.чКоличествоПрочитано = глConsumer.GetMessagePoolLength();		
	Возврат сткРезультат;	
КонецФункции

// Функция - Получатель прочитать список сообщений
//		
//
// Параметры:
//  булПолучатьBase64	- Булево	 - Есдли ИСТИНА - тело сообщения, ключи и значения заголовков -  будут содержать строки в формате Base64 
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрСообщения, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрСообщения		- Сообщения в формате JSON
//		стрОписаниеОшибки 	- Cодержит описание ошибки, в случае неудачи, при выпонении операции
// 
//Получает сообщения из внутреннего пула ВК в формате JSON
//Если сообщения содержат двоичные данные - необходимо вызывать функцию с флагом булПолучатьBase64 = ИСТИНА, иначе JSON сформировать не удастся
Функция Получатель_ПолучитьСообщенияИзПулаJSON(Знач булПолучатьBase64) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрСообщения", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Читаем из пула компоненты	
	сткРезультат.стрСообщения = глConsumer.ReceiveJSONMessages(булПолучатьBase64);
	Если  сткРезультат.стрСообщения = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем пул компоненты	
	Результат = глConsumer.ClearMessagePool();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции   

// Функция - Получить сообщения из пула СтрокаВнутр
//		
//
// Параметры:
//  булПолучатьBase64	- Булево	 - Есдли ИСТИНА - тело сообщения, ключи и значения заголовков -  будут содержать строки в формате Base64 
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрСообщения, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрСообщения		- Сообщения в формате JSON
//		стрОписаниеОшибки 	- Cодержит описание ошибки, в случае неудачи, при выпонении операции
// 
//Получает сообщения из внутреннего пула ВК в формате ЗначениеВСтрокуВнутр 1С
//Если сообщения содержат двоичные данные - необходимо вызывать функцию с флагом булПолучатьBase64 = ИСТИНА, иначе сформировать не удастся
Функция Получатель_ПолучитьСообщенияИзПулаСтрокаВнутр(Знач булПолучатьBase64) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрСообщения", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Читаем из пула компоненты	
	сткРезультат.стрСообщения = глConsumer.ReceiveOnecInternalMessages(булПолучатьBase64);
	Если  сткРезультат.стрСообщения = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем пул компоненты	
	Результат = глConsumer.ClearMessagePool();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Получатель получить смещения раздела
//
// Параметры:
//  стрТопик - Строка	 - Имя топика
//  чРаздел	 - Число 	 - Номер раздела
//  чТаймаут - Число	 - Время в миллисекундах после которого выполнение будет прервано
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		чМинимальное 		- Минимальное смещение раздела
//		чМинимальное 		- Максимальное смещение раздела
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Возвращает минимальное и максимальное смещение раздела
Функция Получатель_ПолучитьСмещенияРаздела(Знач стрТопик, Знач чРаздел, Знач чТаймаут) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("чМинимальное", -1);
	сткРезультат.Вставить("чМаксимальное", -1);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	Результат = глConsumer.QueryWatermarkOffsets(стрТопик, чРаздел, чТаймаут);
	Если Результат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультатПреобразования = JSONВСтруктуру(Результат);
	Если Не сткРезультатПреобразования.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПреобразования.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;
	
	Попытка 
		сткРезультат.чМинимальное = сткРезультатПреобразования.масДанные[0].Low;
		сткРезультат.чМаксимальное = сткРезультатПреобразования.масДанные[0].Hight;
		
	Исключение
		сткРезультат.стрОписаниеОшибки = "Ошибка разбора ответа";
		Возврат сткРезультат;
	КонецПопытки;

	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Получатель получить текущее смещение раздела
//
// Параметры:
//  стрТопик - Строка	 - Имя топика
//  чРаздел	 - Число 	 - Номер раздела
//  чТаймаут - Число	 - Время в миллисекундах после которого выполнение будет прервано
//
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		чСмещение 			- текущее смещение для группы
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Получает текущее смещение раздела для группы
Функция Получатель_ПолучитьТекущееСмещениеРаздела(Знач стрТопик, Знач чРаздел, Знач чТаймаут) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("чСмещение", -1);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.чСмещение = глConsumer.CommittedOffset(стрТопик, чРаздел, чТаймаут);
	Если сткРезультат.чСмещение = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Получатель зафиксировать смещения
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Записывает в брокер последние прочитанные смещения разделов
//Нужно вызывать после вызово функций чтения "Получатель_ПолучитьСообщения", "Получатель_ПрочитатьСписокСообщений", "Получатель_ПолучитьСообщенияJSON"
Функция Получатель_ЗафиксироватьСмещения() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.Commit();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_УдалятьСообщениеИзЛокальнойОчередиПриФормированииJSON(булУдалять = Ложь) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.RemoveMessagesFromLocalQueueOnJSONBuild = булУдалять;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_МаксимальноеКоличествоСообщенийВЛокальнойОчереди(чслКоличество = 100000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.MaxMessagesInLocalQueue = чслКоличество;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьКлючСообщения(булЭкранировать = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.EscapeMessageKey = булЭкранировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьЗначениеСообщения(булЭкранировать = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.EscapeMessageValue = булЭкранировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьКлючиЗаголовков(булЭкранировать = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.EscapeMessageHeaderKey = булЭкранировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ЭкранироватьЗначенияЗаголовков(булЭкранировать = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глConsumer.EscapeMessageHeaderValue = булЭкранировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Получатель_ДобавитьФильтрЗаголовка(Знач стрКлючЗаголовка) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.AppendHeaderFilter(стрКлючЗаголовка);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

Функция Получатель_ОчиститьФильтрыЗаголовков() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Получтатель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глConsumer.ClearHeaderFilter();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции


// Функция - Получатель закрыть
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Закрывает соединения, завершает управялющие потоки внутри ВК, закрывает объект получателя
Функция Получатель_Закрыть() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	булОшибка = Ложь;
	Если глConsumer <> Неопределено Тогда
		сткРезультатСбросаНазначений = Получатель_СброситьНазначения();
		Если НЕ сткРезультатСбросаНазначений.булУспешно Тогда
			булОшибка = Истина;
			сткРезультат.стрОписаниеОшибки = сткРезультат.стрОписаниеОшибки + сткРезультатСбросаНазначений.стрОписаниеОшибки + "; ";
		КонецЕсли;
		сткРезультатОтписки = Получатель_Отписаться();
		Если НЕ сткРезультатОтписки.булУспешно Тогда
			булОшибка = Истина;
			сткРезультат.стрОписаниеОшибки = сткРезультат.стрОписаниеОшибки + сткРезультатСбросаНазначений.стрОписаниеОшибки + "; ";
		КонецЕсли;	
	КонецЕсли;
	
	глConsumer = Неопределено;
	
	сткРезультат.булУспешно = НЕ булОшибка;
	Возврат сткРезультат;	
КонецФункции


#КонецОбласти

#Область Отправитель
	
	
// Функция - Создать отправителя
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Если объект существует
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Создает объект отправителя в глобальной переменной модуля
Функция СоздатьОтправителя(булФлагДляСовместимости = Истина ) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если глProducer <> Неопределено Тогда
		сткРезультат.булУспешно = Истина;
		Возврат сткРезультат;	
	КонецЕсли;
		
	Если Не  гл_булВнешняяКомпонентаПодключена Тогда
		 сткРезультатПодключения = ВыполнитьПодключениеВнешнейКомпоненты(булФлагДляСовместимости);
		 Если Не сткРезультатПодключения.булУспешно Тогда
			 сткРезультат.стрОписаниеОшибки = сткРезультатПодключения.стрОписаниеОшибки;
			Возврат сткРезультат;	 
		 КонецЕсли;
	 КонецЕсли;
	 
	Попытка
		 глProducer = Неопределено;
		 глProducer = Новый("AddIn." + гл_стрИмяКомпоненты + ".KafkaProducer");
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
		Возврат сткРезультат;
	КонецПопытки;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;
КонецФункции

// Функция - Отправитель проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Если объект существует
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект получателя и возможна ли работа с ним
Функция Отправитель_ПроверитьДоступностьОбъекта() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если НЕ гл_булВнешняяКомпонентаПодключена Тогда
		сткРезультат.стрОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат сткРезультат;
	КонецЕсли;
	
	Если глProducer = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = "Не создан отправитель";
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если параметр установлен
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для отправителя (глProducer)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Отправитель_Инициализировать"
Функция Отправитель_УстановитьПараметрГлобальный(Знач стрКлюч, Знач стрЗначение) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глProducer.SetGlobalConf(стрКлюч, стрЗначение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель установить параметр топика
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно			- Истина, если параметр установлен
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр топика для отправителя (глProducer) 
//	Пример: стрКлюч = auto.offset.reset стрЗначение = smallest  
//!!Для применения установленных параметров - необходимка повторная инициализация получателя с помощью функции "Отправитель_Инициализировать"
Функция Отправитель_УстановитьПараметрТопика(Знач стрКлюч, Знач стрЗначение) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глProducer.SetTopicConf(стрКлюч, стрЗначение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель сбросить параметры
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Сбрасывает установенные параметры топика и параметры глобального контекста (установленные функциями Отправитель_УстановитьПараметрГлобальный, Отправитель_УстановитьПараметрТопика)
//!!Для применения - необходимка повторная инициализация получателя с помощью функции "Отправитель_Инициализировать"
Функция Отправитель_СброситьПараметры() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глProducer.ConfReset();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глConsumer.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель инициализировать
//
// Параметры:
//  Адрес	 - Строка 	 - Адреса брокера в формате "10.0.5.187:9092" 
//  Топик	 - Стркоа	 - Имя топика
//	Раздел   - Число	 - Номер раздела, если -1 - будет выполнено партиционирование по ключу
//
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "Отправитель_УстановитьПараметрГлобальный", "Отправитель_УстановитьПараметрТопика", "Отправитель_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК, полностью подготавливает отправителя
Функция Отправитель_Инициализировать(Знач Адрес, Знач Топик, Знач Раздел = -1) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультат.булУспешно = глProducer.Initialize(Адрес, Топик, Раздел);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;              	
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель загрузить сообщения из JSON в список на отправку
//
// Параметры:
//  стрJSON		 - Строка	 - JSON в формате "[{"Key": "Ключ", "Value": "Сообщение", "Headers": [{"Заголовок1": "ЗначениеЗаголовка1"}]}]"
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Загружает список сообщений из JSON в внутренний пул ВК на отправку
Функция Отправитель_ЗагрузитьСообщенияИзJSONВСписокНаОтправку(Знач стрJSON) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультат.булУспешно = глProducer.SetJSONMessageList(стрJSON);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;

	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель получить количество сообщений в списке на отправку
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		чКоличество 		- количество сообщений в списке на отправку
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Возвращает количество сообщенйи в списке на отправку (внутри ВК)
Функция Отправитель_ПолучитьКоличествоСообщенийВСпискеНаОтправку() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("чКоличество", -1);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	

	сткРезультат.чКоличество = глProducer.GetMessagePoolLength();
	сткРезультат.булУспешно = сткРезультат.чКоличество >= 0;
	
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;

	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель очистить список на отправку
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Очищает внутренний пул на отправку ВК
Функция Отправитель_ОчиститьСписокНаОтправку() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глProducer.ClearMessagePool();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
	КонецЕсли;

	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель все сообщения доставлены
// 
// Возвращаемое значение:
// - Структура - (булУспешно, булВсеСообщенияДоставлены, стрОписнаиеОшибки)
//      булУспешно 					- Истина, если успешно
//		булВсеСообщенияДоставлены	- Истина, если все сообщения из внутреннего пула сообщений ВК были успешно доставлены (после вызова "Отправитель_Отправить")
//		стрОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Получает признак успешности обработки пула сообщений (булВсеСообщенияДоставлены = Истина, ели все сообщения из пула успешно доставлены, после вызова функции "Отправитель_Отправить")
Функция Отправитель_ВсеСообщенияДоставлены() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Истина);
	сткРезультат.Вставить("булВсеСообщенияДоставлены", Ложь);

	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булВсеСообщенияДоставлены = глProducer.IsDelivered();
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель получить JSONОтчет о доставке
// (БЫСТРЫЙ СПОСОБ)
// Возвращаемое значение:
// - Структура - (булУспешно, стрОтчетОДоставке, стрОписнаиеОшибки)
//      булУспешно 					- Истина, если успешно
//		стрОтчетОДоставке			- JSON отчет о доставке
//		стрОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Возвращает массив структур в формате JSON - отчет о доставке (колонки: key, status, topic, partition, timestamp, offset, error)
Функция Отправитель_ПолучитьJSONОтчетОДоставке() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОтчетОДоставке", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.стрОтчетОДоставке = глProducer.GetJSONDeliveryReport();	
	Если сткРезультат.стрОтчетОДоставке = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
		Возврат сткРезультат;	
	КонецЕсли;

	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции

// Функция - Отправитель отправить
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки)
//      булУспешно 					- Истина, если успешно
//		стрОписаниеОшибки 			- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Выполняет отправку из внутреннего пула сообщений ВК, очищает этот пул
Функция Отправитель_Отправить() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глProducer.Produce();	
	Если сткРезультат.булУспешно <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глProducer.ErrorDescription;
		Возврат сткРезультат;	
	КонецЕсли;

	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции

Функция Отправитель_ДекодироватьКлючСообщенияКакBase64Строку(булДекодировать = Ложь) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глProducer.DecodeBase64Key = булДекодировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Отправитель_ДекодироватьТелоСообщенияКакBase64Строку(булДекодировать = Ложь) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глProducer.DecodeBase64Value = булДекодировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

Функция Отправитель_ДекодироватьЗначенияЗаголовковКакBase64Строку(булДекодировать = Ложь) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = Отправитель_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	глProducer.DecodeBase64HeadersValue = булДекодировать;
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции

// Функция - Отправитель закрыть
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Закрывает соединения, завершает управялющие потоки внутри ВК, закрывает объект отправителя
Функция Отправитель_Закрыть() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	глProducer = Неопределено;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции


#КонецОбласти  


#Область КлиентАдминистрирования   

// Функция - Создать клиент администрирования
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки)
//
//Создает объект клиента администрирования в глобальной переменной модуля
Функция СоздатьКлиентАдминистрирования(булФлагДляСовместимости = Истина) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если глAdminClient <> Неопределено Тогда
		сткРезультат.булУспешно = Истина;
		Возврат сткРезультат;	
	КонецЕсли;
	
	Если Не  гл_булВнешняяКомпонентаПодключена Тогда
		 сткРезультатПодключения = ВыполнитьПодключениеВнешнейКомпоненты(булФлагДляСовместимости);
		 Если Не сткРезультатПодключения.булУспешно Тогда
			 сткРезультат.стрОписаниеОшибки = сткРезультатПодключения.стрОписаниеОшибки;
			Возврат сткРезультат;	 
		 КонецЕсли;
	 КонецЕсли;
	 
	Попытка
		 глAdminClient = Неопределено;
		 глAdminClient = Новый("AddIn." + гл_стрИмяКомпоненты + ".KafkaAdminClient");
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
		Возврат сткРезультат;
	КонецПопытки;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;
КонецФункции
 
// Функция - Клиент администрирования проверить доступность объекта 
// 
// Возвращаемое значение:
//   - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Если объект существует
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Проверяет, существует ли объект клиента администрирования и возможна ли работа с ним
Функция КлиентАдминистрирования_ПроверитьДоступностьОбъекта() Экспорт

	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	Если НЕ гл_булВнешняяКомпонентаПодключена Тогда
		сткРезультат.стрОписаниеОшибки = "Не подключена внешняя компонента";
		Возврат сткРезультат;
	КонецЕсли;
	
	Если глAdminClient = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = "Не создан клиент администрирования";
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции
 
// Функция - Клиент администрирования установить параметр глобальный
//
// Параметры:
//  стрКлюч		 - 	Строка - Имя параметра
//  стрЗначение	 - 	Строка - Значение параметра
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если параметр установлен
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Устанавливает параметр глабольного контекста для клиента администрирования (глAdminClient)
//	Пример: стрКлюч = socket.timeout.ms стрЗначение = 30000  
//!!Для применения установленных параметров - необходимка повторная инициализация клиента администрирования с помощью функции "КлиентАдминистрирования_Инициализировать"
Функция КлиентАдминистрирования_УстановитьПараметрГлобальный(Знач стрКлюч, Знач стрЗначение) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глAdminClient.SetGlobalConf(стрКлюч, стрЗначение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции

// Функция - Клиент администрирования сбросить параметры
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Сбрасывает установенные параметры глобального контекста (установленные функцией КлиентАдминистрирования_УстановитьПараметрГлобальный)
//!!Для применения - необходимка повторная инициализация клиента администрирования с помощью функции "КлиентАдминистрирования_Инициализировать"
Функция КлиентАдминистрирования_СброситьПараметры() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глAdminClient.ConfReset();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции
	
// Функция - Клиент администрирования инициализировать
//
// Параметры:
//  стрСписокБрокеров		 - Строка 	 - Адреса брокеров в формате "10.0.5.187:9092,10.0.5.85:9092,10.0.5.86:9092"
//
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Применяет параметры, установленные функциями "КлиентАдминистрирования_УстановитьПараметрГлобальный", "КлиентАдминистрирования_СброситьПараметры" 
//Открывает соединения до брокера, создает управляющие потоки внутри ВК
Функция КлиентАдминистрирования_Инициализировать(Знач стрСписокБрокеров) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
		
	сткРезультат.булУспешно = глAdminClient.Инициализация(стрСписокБрокеров);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции    

// Функция - Клиент администрирования добавить назначение
//
// Параметры:
//  стрТопик	 - Строка	 -  Имя топика, который необходимо добавить в список назначений
//  чслРаздел	 - Число	 -  Номер раздела топика
//  чслСмещение	 - Число,Неопределено	 - Смещение раздела
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Добавляет назначение в специальный список, внутри ВК
Функция КлиентАдминистрирования_ДобавитьНазначение(Знач стрТопик, Знач чслРаздел, Знач чслСмещение = Неопределено) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глAdminClient.AddRecordToTopicPartitionList(стрТопик, чслРаздел, чслСмещение);
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	КонецЕсли;
	
	Возврат сткРезультат;	
КонецФункции   

// Функция - Клиент администрирования очистить список назначений
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Очищает список назначений внутри ВК, сформированный посредставм вызова функции "КлиентАдминистрирования_ДобавитьНазначение"
Функция КлиентАдминистрирования_ОчиститьСписокНазначений() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = глAdminClient.ClearTopicPartitionList();
	Если сткРезультат.булУспешно <> Истина Тогда 
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	КонецЕсли;

	
	Возврат сткРезультат;	
КонецФункции

Функция КлиентАдминистрирования_УдалитьСообщенияДоСмещения(Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Удаляем сообщения	
	сткРезультат.стрРезультат = глAdminClient.DeleteRecordsBefore(чслТаймаут);
	Если  сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем список назначений	
	Результат = глAdminClient.ClearTopicPartitionList();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции    

Функция КлиентАдминистрирования_ПолучитьСмещенияГруппыПолучателей(Знач стрГруппа, Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Удаляем сообщения	
	сткРезультат.стрРезультат = глAdminClient.GetGroupOffsets(стрГруппа, чслТаймаут);
	Если сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции  

Функция КлиентАдминистрирования_ПолучитьСписокГруппПолучателей(Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Удаляем сообщения	
	сткРезультат.стрРезультат = глAdminClient.GetGroupList(чслТаймаут);            
	сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
	Если сткРезультат.стрРезультат = Неопределено Тогда
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции           

Функция КлиентАдминистрирования_ПолучитьМетаданные(Знач чслТаймаут = 30000, Знач стрТопик = Неопределено) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Удаляем сообщения	
	сткРезультат.стрРезультат = глAdminClient.GetMetadata(чслТаймаут, стрТопик);            
	Если сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции 

Функция КлиентАдминистрирования_ИзменитьСмещенияГруппы(Знач стрГруппа, Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Изменяем смещения группы	
	сткРезультат.стрРезультат = глAdminClient.AlterGroupOffsets(стрГруппа, чслТаймаут);
	Если  сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем список назначений	
	Результат = глAdminClient.ClearTopicPartitionList();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции  

Функция КлиентАдминистрирования_УдалитьСмещенияГруппы(Знач стрГруппа, Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Удаляем смещения группы	
	сткРезультат.стрРезультат = глAdminClient.DeleteGroupOffsets(стрГруппа, чслТаймаут);
	Если  сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем список назначений	
	Результат = глAdminClient.ClearTopicPartitionList();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции   

Функция КлиентАдминистрирования_ПолучитьСмещенияРазделов(Знач чслТаймаут = 30000) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрРезультат", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	сткРезультатПроверки = КлиентАдминистрирования_ПроверитьДоступностьОбъекта();
	Если Не сткРезультатПроверки.булУспешно Тогда
		сткРезультат.стрОписаниеОшибки = сткРезультатПроверки.стрОписаниеОшибки;
		Возврат сткРезультат;
	КонецЕсли;	
	
	//Получаем смещения разделов	
	сткРезультат.стрРезультат = глAdminClient.QueryWatermarkOffsets(чслТаймаут);
	Если  сткРезультат.стрРезультат = Неопределено Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;	

	//Очищаем список назначений	
	Результат = глAdminClient.ClearTopicPartitionList();
	Если Результат <> Истина Тогда
		сткРезультат.стрОписаниеОшибки = глAdminClient.ErrorDescription;
		Возврат сткРезультат;
	КонецЕсли;
	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФУнкции 

// Функция - Клиент администрирования закрыть
// 
// Возвращаемое значение:
// - Структура - (булУспешно, стрОписнаиеОшибки
//      булУспешно 			- Истина, если успешно
//		стрОписаниеОшибки 	- содержит описание ошибки, в случае неудачи, при выпонении операции
//
//Закрывает соединения, завершает управялющие потоки внутри ВК, закрывает объект клиента администрирования
Функция КлиентАдминистрирования_Закрыть() Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("стрОписаниеОшибки", "");	
	
	глAdminClient = Неопределено;	
	сткРезультат.булУспешно = Истина;
	Возврат сткРезультат;	
КонецФункции

#КонецОбласти  


#Область ВспомогательныеПроцедурыИФункции

Функция СтруктуруВJSON(п_сткДанные)    Экспорт
	
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("булУспешно",        Ложь);
	_сткРезультат.Вставить("стрДанные", 	    "");
	_сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	_ЗаписьJSON                = Новый ЗаписьJSON();
	_НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	
	_ЗаписьJSON.УстановитьСтроку();
	
	_НастройкиСериализацииJSON.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	_НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(_ЗаписьJSON, п_сткДанные, _НастройкиСериализацииJSON);
		
		_сткРезультат.стрДанные  = _ЗаписьJSON.Закрыть();
		_сткРезультат.булУспешно = Истина;
	Исключение
		_сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат _сткРезультат;   	
КонецФункции

Функция JSONВСтруктуру(п_стрJSON)   Экспорт
		
	_сткРезультат = Новый Структура();
	
	_сткРезультат.Вставить("булУспешно",        Ложь);
	_сткРезультат.Вставить("масДанные",         Неопределено);
	_сткРезультат.Вставить("стрОписаниеОшибки", "");
	
	_Чтение = Новый ЧтениеJSON;
	_Чтение.УстановитьСтроку(п_стрJSON);
	
	Попытка
		_Данные = ПрочитатьJSON(_Чтение, Ложь);
		
		Если ТипЗнч(_Данные) = Тип("Структура") Тогда
			_сткРезультат.масДанные = Новый Массив();	
			_сткРезультат.масДанные.Добавить(_Данные);
		ИначеЕсли ТипЗнч(_Данные) = Тип("Массив") Тогда
			_сткРезультат.масДанные = _Данные;				
		Иначе
			ВызватьИсключение "Не верный тип данных!";
		КонецЕсли;
		
		_сткРезультат.булУспешно = Истина;
	Исключение
		_сткРезультат.стрОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;	
	
	_Чтение.Закрыть();
	
	Возврат _сткРезультат;	
КонецФункции

Функция СтрокаВДвоичныеДанные(СтрокаДляПреобразованияВДвоичныеДанные) Экспорт
	
	сткРезультат = Новый Структура();
	сткРезультат.Вставить("булУспешно", Ложь);
	сткРезультат.Вставить("ДвоичныеДанные", Неопределено);
	сткРезультат.Вставить("стрОписаниеОшибки", "");

	Поток  = Новый ПотокВПамяти();
	Запись = Новый ЗаписьДанных(Поток,КодировкаТекста.UTF8);
	
	Попытка
		Запись.ЗаписатьСимволы(СтрокаДляПреобразованияВДвоичныеДанные);
		Запись.Закрыть(); 
	Исключение
		сткРезультат.стрОписаниеОшибки = ОписаниеОшибки(); 
		Возврат сткРезультат;
	КонецПопытки;
	
	сткРезультат.ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные(); 
	сткРезультат.булУспешно = Истина;
	
	Возврат сткРезультат; 	
КонецФункции

#КонецОбласти


ИнициализацияМодуля();
