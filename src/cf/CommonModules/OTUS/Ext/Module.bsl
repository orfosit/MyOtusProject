
Процедура АвтоРегистрацияОбращенияПриЗаписи(Источник, Отказ) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		 |	Обращение.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.Обращение КАК Обращение
		 |ГДЕ
		 |	Обращение.ЭлектронноеПисьмо = &ЭлектронноеПисьмо";
		Запрос.УстановитьПараметр("ЭлектронноеПисьмо",Источник.Ссылка);
		Рез = Запрос.Выполнить();
		
		//Если Рез.Пустой() Тогда
			
			ДокОбр = Документы.Обращение.СоздатьДокумент();   
			ДокОбр.Дата = Источник.Ссылка.Дата;
	        ДокОбр.СостояниеОбращения = Перечисления.СостояниеРаботыОбращения.Зарегистрировано;
			ДокОбр.ТемаОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"Тема");
			ДокОбр.ОписаниеОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"Текст"); 
			ДокОбр.Организация = Константы.Организация.Получить();
			УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"УчетнаяЗапись"); 
			АдресЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись,"АдресЭлектроннойПочты"); 
			
			ДокОбр.СостояниеОбращения = Перечисления.СостояниеРаботыОбращения.Зарегистрировано;
		    ДокОбр.ЭлектронноеПисьмо = Источник.Ссылка;                               
			ДокОбр.Приоритет = Перечисления.ПриоритетОбращения.Обычный;
			ДокОбр.ТипОбращения = Перечисления.ТипОбращения.ЗапросНаОбслуживание;
			Если ЗначениеЗаполнено(Источник.Ссылка.ОтправительАдрес) ТОгда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
					|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец КАК Клиент
					|ИЗ
					|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
					|ГДЕ
					|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
					|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид";
				
				Запрос.УстановитьПараметр("АдресЭП", НРег(Источник.Ссылка.ОтправительАдрес));
				Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);			
				РезультатЗапроса = Запрос.Выполнить();			
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Клиент =  ВыборкаДетальныеЗаписи.Клиент; 
					КонтактноеЛицоОтЗаказчика = ВыборкаДетальныеЗаписи.КонтактноеЛицо;   
					ДокОбр.Клиент = Клиент;
					ДокОбр.КонтактноеЛицоОтЗаказчика = КонтактноеЛицоОтЗаказчика;
				КонецЦикла;	
			КонецЕсли;	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КлиентыПараметрыРеакции.ТипОбращения КАК ТипОбращения,
				|	КлиентыПараметрыРеакции.ВремяРеакции КАК ВремяРеакции
				|ИЗ
				|	Справочник.Клиенты.ПараметрыРеакции КАК КлиентыПараметрыРеакции
				|ГДЕ
				|	КлиентыПараметрыРеакции.Ссылка = &Клиент
				|	И КлиентыПараметрыРеакции.ТипОбращения = &ТипОбращения";
			
			Запрос.УстановитьПараметр("Клиент", Клиент);
			Запрос.УстановитьПараметр("ТипОбращения", Перечисления.ТипОбращения.ЗапросНаОбслуживание);

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КрайнийСрокРеакции = ТекущаяДата() + ВыборкаДетальныеЗаписи.ВремяРеакции * 60*60;
			КонецЦикла;
			ДокОбр.КрайнийСрокРеакции = КрайнийСрокРеакции; 
			
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДокОбр.ТемаОбращения,";");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СистемыУчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СистемыУчета КАК СистемыУчета
				|ГДЕ
				|	СистемыУчета.Наименование ПОДОБНО &Наименование";

			
			Запрос.УстановитьПараметр("Наименование", "%"+МассивСтрок[0]+"%");

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ИТСистема = Справочники.СистемыУчета.ПустаяСсылка();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				ИТСистема = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		
			ДокОбр.Ответственный = ОпределитьОтветсвенногоПоУмолчанию(Клиент, ИТСистема); 
		
			ДокОбр.Записать();
			
			//Отправка в kafka
			kafka_send(ДокОбр.Ссылка);
			
		//КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьОтветсвенногоПоУмолчанию(Клиент, ИТСистема) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиКомпетенцииСотрудника.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ Сотрудники
	               |ИЗ
	               |	Справочник.Сотрудники.КомпетенцииСотрудника КАК СотрудникиКомпетенцииСотрудника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СостоянияЗанятостиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	               |	СостоянияЗанятостиСотрудниковСрезПоследних.СостояниеЗагруженности КАК СостояниеЗагруженности
	               |ПОМЕСТИТЬ СостояниеСотрудников
	               |ИЗ
	               |	РегистрСведений.СостоянияЗанятостиСотрудников.СрезПоследних(, ) КАК СостоянияЗанятостиСотрудниковСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка,
	               |	СостояниеСотрудников.СостояниеЗагруженности КАК СостояниеЗагруженности
	               |ПОМЕСТИТЬ ВТПростои
	               |ИЗ
	               |	Сотрудники КАК Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеСотрудников КАК СостояниеСотрудников
	               |		ПО Сотрудники.Ссылка = СостояниеСотрудников.Сотрудник
	               |ГДЕ
	               |	СостояниеСотрудников.СостояниеЗагруженности В(&СостояниеЗагруженностиПростой)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТПростои.Ссылка КАК Ссылка,
	               |	КартаЗнанийТест.УровеньВладения КАК УровеньВладения,
	               |	КартаЗнанийТест.Вопрос.Компетенция.СистемаУчета КАК СистемаУчета
	               |ПОМЕСТИТЬ ВТУровниВладения
	               |ИЗ
	               |	ВТПростои КАК ВТПростои
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КартаЗнаний КАК КартаЗнанийТест
	               |		ПО ВТПростои.Ссылка = КартаЗнанийТест.Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТПростои.Ссылка,
	               |	КартаЗнанийТест.Вопрос.Компетенция.СистемаУчета,
	               |	КартаЗнанийТест.УровеньВладения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КлиентыИспользуемыеСистемы.ИТСистема КАК ИТСистема
	               |ПОМЕСТИТЬ ВТКлиенты
	               |ИЗ
	               |	Справочник.Клиенты.ИспользуемыеСистемы КАК КлиентыИспользуемыеСистемы
	               |ГДЕ
	               |	КлиентыИспользуемыеСистемы.Ссылка = &Клиент
	               |	И КлиентыИспользуемыеСистемы.ИТСистема = &ИТСистема
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКлиенты.ИТСистема КАК ИТСистемаЗаказчика,
	               |	ВТУровниВладения.Ссылка КАК Сотрудник,
	               |	ВТУровниВладения.УровеньВладения КАК УровеньВладения
	               |ПОМЕСТИТЬ КомпетенцииПодЗадачу
	               |ИЗ
	               |	ВТКлиенты КАК ВТКлиенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУровниВладения КАК ВТУровниВладения
	               |		ПО ВТКлиенты.ИТСистема = ВТУровниВладения.СистемаУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КомпетенцииПодЗадачу.ИТСистемаЗаказчика КАК ИТСистемаЗаказчика,
	               |	КомпетенцииПодЗадачу.Сотрудник КАК Сотрудник,
	               |	КомпетенцииПодЗадачу.УровеньВладения КАК УровеньВладения
	               |ИЗ
	               |	КомпетенцииПодЗадачу КАК КомпетенцииПодЗадачу
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УровеньВладения УБЫВ";
	
	
	Запрос.УстановитьПараметр("Клиент",Клиент);              
	СостояниеЗагруженностиПростой = Новый СписокЗначений;
	СостояниеЗагруженностиПростой.Добавить(Перечисления.СостояниеЗагруженности.ПустаяСсылка());
	СостояниеЗагруженностиПростой.добавить(Перечисления.СостояниеЗагруженности.Простой);
	Запрос.УстановитьПараметр("СостояниеЗагруженностиПростой",СостояниеЗагруженностиПростой);
	Запрос.УстановитьПараметр("ИТСистема",ИТСистема);
	Выбор = Запрос.Выполнить().Выбрать();
	
	Пока Выбор.Следующий() Цикл
		Возврат Выбор.Сотрудник;
	КонецЦикла;
КонецФункции

//Отправка в kafka			
Процедура kafka_send(ОбращениеСсылка) экспорт
	
	//Сериализация
	ГУИД = Строка(ОбращениеСсылка.УникальныйИдентификатор());	
	СериализованнаяСтрока = СериализоватьВJSON(ОбращениеСсылка);	   
	Попытка
		Результат = ПодключитьВнешнююКомпоненту("Обработка.РаботаСKafkaЧерезВК.Макет.librdkafka_win64" ,"librdkafka", ТипВнешнейКомпоненты.Native);
		глProducer = Новый("AddIn.librdkafka.KafkaProducer");	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;      
	
    SetGlobalConf = глProducer.SetGlobalConf("queue.buffering.max.messages", "1000000");
	SetGlobalConf = глProducer.SetGlobalConf("socket.timeout.ms", "30000");
	SetGlobalConf = глProducer.SetGlobalConf("delivery.report.only.error", "false");

	SetTopicConf = глProducer.SetTopicConf("message.timeout.ms", "30000");
	SetTopicConf = глProducer.SetTopicConf("compression.codec", "lz4");
	SetTopicConf = глProducer.SetTopicConf("request.required.acks", "-1");
	
	Хост = Константы.ХостКафка.Получить();
	
	Initialize = глProducer.Initialize(Хост, "SD", -1);

	мДанныеНаЗапись = Новый Массив();
	мЗаголовки = Новый Массив();
	мЗаголовки.Добавить(Новый Структура("СсылкаНаДокумент", Строка(ОбращениеСсылка)));
	мДанныеНаЗапись.Добавить(Новый Структура("Key, Value, Headers", ГУИД, СериализованнаяСтрока, мЗаголовки));
    стрJSON =  СтруктуруВJSON(мДанныеНаЗапись);
	глProducer.SetJSONMessageList(стрJSON);

	булУспешно = глProducer.Produce();
	стрОтчетОДоставке = глProducer.GetJSONDeliveryReport();
	

КонецПроцедуры   

Функция СериализоватьВJSON(ОбращениеСсылка) Экспорт
    
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON( ,,,,,Истина,Истина,Истина,Истина);

	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	 
	ОбъектОбращение = ОбращениеСсылка.ПолучитьОбъект();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектОбращение, НазначениеТипаXML.Явное);
	СериализованнаяСтрока = ЗаписьJSON.Закрыть();  
	
    Возврат СериализованнаяСтрока;
    
КонецФункции  

Функция СтруктуруВJSON(п_сткДанные)    Экспорт
	
	_ЗаписьJSON                = Новый ЗаписьJSON();
	_НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	
	_ЗаписьJSON.УстановитьСтроку();
	
	_НастройкиСериализацииJSON.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	_НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(_ЗаписьJSON, п_сткДанные, _НастройкиСериализацииJSON);
		
		_сткРезультат = _ЗаписьJSON.Закрыть();
	Исключение
		Возврат ОписаниеОшибки();	
	КонецПопытки;
	
	Возврат _сткРезультат;   	
КонецФункции

